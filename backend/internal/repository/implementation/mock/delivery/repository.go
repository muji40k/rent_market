// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../implementation/mock/delivery/repository.go
//

// Package mock_delivery is a generated GoMock package.
package mock_delivery

import (
	reflect "reflect"
	models "rent_service/internal/domain/models"
	requests "rent_service/internal/domain/requests"
	collection "rent_service/internal/misc/types/collection"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
	isgomock struct{}
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepository) Create(delivery requests.Delivery) (requests.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", delivery)
	ret0, _ := ret[0].(requests.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryMockRecorder) Create(delivery any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepository)(nil).Create), delivery)
}

// GetActiveByInstanceId mocks base method.
func (m *MockIRepository) GetActiveByInstanceId(instanceId uuid.UUID) (requests.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveByInstanceId", instanceId)
	ret0, _ := ret[0].(requests.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveByInstanceId indicates an expected call of GetActiveByInstanceId.
func (mr *MockIRepositoryMockRecorder) GetActiveByInstanceId(instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveByInstanceId", reflect.TypeOf((*MockIRepository)(nil).GetActiveByInstanceId), instanceId)
}

// GetActiveByPickUpPointId mocks base method.
func (m *MockIRepository) GetActiveByPickUpPointId(pickUpPointId uuid.UUID) (collection.Collection[requests.Delivery], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveByPickUpPointId", pickUpPointId)
	ret0, _ := ret[0].(collection.Collection[requests.Delivery])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveByPickUpPointId indicates an expected call of GetActiveByPickUpPointId.
func (mr *MockIRepositoryMockRecorder) GetActiveByPickUpPointId(pickUpPointId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveByPickUpPointId", reflect.TypeOf((*MockIRepository)(nil).GetActiveByPickUpPointId), pickUpPointId)
}

// GetById mocks base method.
func (m *MockIRepository) GetById(deliveryId uuid.UUID) (requests.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", deliveryId)
	ret0, _ := ret[0].(requests.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRepositoryMockRecorder) GetById(deliveryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRepository)(nil).GetById), deliveryId)
}

// Update mocks base method.
func (m *MockIRepository) Update(delivery requests.Delivery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", delivery)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryMockRecorder) Update(delivery any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepository)(nil).Update), delivery)
}

// MockICompanyRepository is a mock of ICompanyRepository interface.
type MockICompanyRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICompanyRepositoryMockRecorder
	isgomock struct{}
}

// MockICompanyRepositoryMockRecorder is the mock recorder for MockICompanyRepository.
type MockICompanyRepositoryMockRecorder struct {
	mock *MockICompanyRepository
}

// NewMockICompanyRepository creates a new mock instance.
func NewMockICompanyRepository(ctrl *gomock.Controller) *MockICompanyRepository {
	mock := &MockICompanyRepository{ctrl: ctrl}
	mock.recorder = &MockICompanyRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICompanyRepository) EXPECT() *MockICompanyRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockICompanyRepository) GetAll() (collection.Collection[models.DeliveryCompany], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(collection.Collection[models.DeliveryCompany])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockICompanyRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockICompanyRepository)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockICompanyRepository) GetById(companyId uuid.UUID) (models.DeliveryCompany, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", companyId)
	ret0, _ := ret[0].(models.DeliveryCompany)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockICompanyRepositoryMockRecorder) GetById(companyId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockICompanyRepository)(nil).GetById), companyId)
}
