// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../implementation/mock/role/repository.go
//

// Package mock_role is a generated GoMock package.
package mock_role

import (
	reflect "reflect"
	models "rent_service/internal/domain/models"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIAdministratorRepository is a mock of IAdministratorRepository interface.
type MockIAdministratorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAdministratorRepositoryMockRecorder
	isgomock struct{}
}

// MockIAdministratorRepositoryMockRecorder is the mock recorder for MockIAdministratorRepository.
type MockIAdministratorRepositoryMockRecorder struct {
	mock *MockIAdministratorRepository
}

// NewMockIAdministratorRepository creates a new mock instance.
func NewMockIAdministratorRepository(ctrl *gomock.Controller) *MockIAdministratorRepository {
	mock := &MockIAdministratorRepository{ctrl: ctrl}
	mock.recorder = &MockIAdministratorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAdministratorRepository) EXPECT() *MockIAdministratorRepositoryMockRecorder {
	return m.recorder
}

// GetByUserId mocks base method.
func (m *MockIAdministratorRepository) GetByUserId(userId uuid.UUID) (models.Administrator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", userId)
	ret0, _ := ret[0].(models.Administrator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockIAdministratorRepositoryMockRecorder) GetByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockIAdministratorRepository)(nil).GetByUserId), userId)
}

// MockIRenterRepository is a mock of IRenterRepository interface.
type MockIRenterRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRenterRepositoryMockRecorder
	isgomock struct{}
}

// MockIRenterRepositoryMockRecorder is the mock recorder for MockIRenterRepository.
type MockIRenterRepositoryMockRecorder struct {
	mock *MockIRenterRepository
}

// NewMockIRenterRepository creates a new mock instance.
func NewMockIRenterRepository(ctrl *gomock.Controller) *MockIRenterRepository {
	mock := &MockIRenterRepository{ctrl: ctrl}
	mock.recorder = &MockIRenterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRenterRepository) EXPECT() *MockIRenterRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRenterRepository) Create(userId uuid.UUID) (models.Renter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId)
	ret0, _ := ret[0].(models.Renter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRenterRepositoryMockRecorder) Create(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRenterRepository)(nil).Create), userId)
}

// GetById mocks base method.
func (m *MockIRenterRepository) GetById(renterId uuid.UUID) (models.Renter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", renterId)
	ret0, _ := ret[0].(models.Renter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRenterRepositoryMockRecorder) GetById(renterId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRenterRepository)(nil).GetById), renterId)
}

// GetByUserId mocks base method.
func (m *MockIRenterRepository) GetByUserId(userId uuid.UUID) (models.Renter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", userId)
	ret0, _ := ret[0].(models.Renter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockIRenterRepositoryMockRecorder) GetByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockIRenterRepository)(nil).GetByUserId), userId)
}

// MockIStorekeeperRepository is a mock of IStorekeeperRepository interface.
type MockIStorekeeperRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIStorekeeperRepositoryMockRecorder
	isgomock struct{}
}

// MockIStorekeeperRepositoryMockRecorder is the mock recorder for MockIStorekeeperRepository.
type MockIStorekeeperRepositoryMockRecorder struct {
	mock *MockIStorekeeperRepository
}

// NewMockIStorekeeperRepository creates a new mock instance.
func NewMockIStorekeeperRepository(ctrl *gomock.Controller) *MockIStorekeeperRepository {
	mock := &MockIStorekeeperRepository{ctrl: ctrl}
	mock.recorder = &MockIStorekeeperRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorekeeperRepository) EXPECT() *MockIStorekeeperRepositoryMockRecorder {
	return m.recorder
}

// GetByUserId mocks base method.
func (m *MockIStorekeeperRepository) GetByUserId(userId uuid.UUID) (models.Storekeeper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", userId)
	ret0, _ := ret[0].(models.Storekeeper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockIStorekeeperRepositoryMockRecorder) GetByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockIStorekeeperRepository)(nil).GetByUserId), userId)
}
