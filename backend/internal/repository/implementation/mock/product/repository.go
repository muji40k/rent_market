// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../implementation/mock/product/repository.go
//

// Package mock_product is a generated GoMock package.
package mock_product

import (
	reflect "reflect"
	models "rent_service/internal/domain/models"
	collection "rent_service/internal/misc/types/collection"
	product "rent_service/internal/repository/interfaces/product"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
	isgomock struct{}
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockIRepository) GetById(productId uuid.UUID) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", productId)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRepositoryMockRecorder) GetById(productId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRepository)(nil).GetById), productId)
}

// GetWithFilter mocks base method.
func (m *MockIRepository) GetWithFilter(filter product.Filter, sort product.Sort) (collection.Collection[models.Product], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithFilter", filter, sort)
	ret0, _ := ret[0].(collection.Collection[models.Product])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithFilter indicates an expected call of GetWithFilter.
func (mr *MockIRepositoryMockRecorder) GetWithFilter(filter, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithFilter", reflect.TypeOf((*MockIRepository)(nil).GetWithFilter), filter, sort)
}

// MockICharacteristicsRepository is a mock of ICharacteristicsRepository interface.
type MockICharacteristicsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICharacteristicsRepositoryMockRecorder
	isgomock struct{}
}

// MockICharacteristicsRepositoryMockRecorder is the mock recorder for MockICharacteristicsRepository.
type MockICharacteristicsRepositoryMockRecorder struct {
	mock *MockICharacteristicsRepository
}

// NewMockICharacteristicsRepository creates a new mock instance.
func NewMockICharacteristicsRepository(ctrl *gomock.Controller) *MockICharacteristicsRepository {
	mock := &MockICharacteristicsRepository{ctrl: ctrl}
	mock.recorder = &MockICharacteristicsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICharacteristicsRepository) EXPECT() *MockICharacteristicsRepositoryMockRecorder {
	return m.recorder
}

// GetByProductId mocks base method.
func (m *MockICharacteristicsRepository) GetByProductId(productId uuid.UUID) (models.ProductCharacteristics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProductId", productId)
	ret0, _ := ret[0].(models.ProductCharacteristics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProductId indicates an expected call of GetByProductId.
func (mr *MockICharacteristicsRepositoryMockRecorder) GetByProductId(productId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProductId", reflect.TypeOf((*MockICharacteristicsRepository)(nil).GetByProductId), productId)
}

// MockIPhotoRepository is a mock of IPhotoRepository interface.
type MockIPhotoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPhotoRepositoryMockRecorder
	isgomock struct{}
}

// MockIPhotoRepositoryMockRecorder is the mock recorder for MockIPhotoRepository.
type MockIPhotoRepositoryMockRecorder struct {
	mock *MockIPhotoRepository
}

// NewMockIPhotoRepository creates a new mock instance.
func NewMockIPhotoRepository(ctrl *gomock.Controller) *MockIPhotoRepository {
	mock := &MockIPhotoRepository{ctrl: ctrl}
	mock.recorder = &MockIPhotoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPhotoRepository) EXPECT() *MockIPhotoRepositoryMockRecorder {
	return m.recorder
}

// GetByProductId mocks base method.
func (m *MockIPhotoRepository) GetByProductId(productId uuid.UUID) (collection.Collection[uuid.UUID], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProductId", productId)
	ret0, _ := ret[0].(collection.Collection[uuid.UUID])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProductId indicates an expected call of GetByProductId.
func (mr *MockIPhotoRepositoryMockRecorder) GetByProductId(productId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProductId", reflect.TypeOf((*MockIPhotoRepository)(nil).GetByProductId), productId)
}
