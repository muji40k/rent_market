// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../implementation/mock/storage/repository.go
//

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	reflect "reflect"
	records "rent_service/internal/domain/records"
	collection "rent_service/internal/misc/types/collection"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
	isgomock struct{}
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepository) Create(storage records.Storage) (records.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", storage)
	ret0, _ := ret[0].(records.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryMockRecorder) Create(storage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepository)(nil).Create), storage)
}

// GetActiveByInstanceId mocks base method.
func (m *MockIRepository) GetActiveByInstanceId(instanceId uuid.UUID) (records.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveByInstanceId", instanceId)
	ret0, _ := ret[0].(records.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveByInstanceId indicates an expected call of GetActiveByInstanceId.
func (mr *MockIRepositoryMockRecorder) GetActiveByInstanceId(instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveByInstanceId", reflect.TypeOf((*MockIRepository)(nil).GetActiveByInstanceId), instanceId)
}

// GetActiveByPickUpPointId mocks base method.
func (m *MockIRepository) GetActiveByPickUpPointId(pickUpPointId uuid.UUID) (collection.Collection[records.Storage], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveByPickUpPointId", pickUpPointId)
	ret0, _ := ret[0].(collection.Collection[records.Storage])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveByPickUpPointId indicates an expected call of GetActiveByPickUpPointId.
func (mr *MockIRepositoryMockRecorder) GetActiveByPickUpPointId(pickUpPointId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveByPickUpPointId", reflect.TypeOf((*MockIRepository)(nil).GetActiveByPickUpPointId), pickUpPointId)
}

// Update mocks base method.
func (m *MockIRepository) Update(storage records.Storage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", storage)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryMockRecorder) Update(storage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepository)(nil).Update), storage)
}
