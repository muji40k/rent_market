// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../implementation/mock/rent/repository.go
//

// Package mock_rent is a generated GoMock package.
package mock_rent

import (
	reflect "reflect"
	records "rent_service/internal/domain/records"
	requests "rent_service/internal/domain/requests"
	collection "rent_service/internal/misc/types/collection"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
	isgomock struct{}
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepository) Create(rent records.Rent) (records.Rent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", rent)
	ret0, _ := ret[0].(records.Rent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryMockRecorder) Create(rent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepository)(nil).Create), rent)
}

// GetActiveByInstanceId mocks base method.
func (m *MockIRepository) GetActiveByInstanceId(instanceId uuid.UUID) (records.Rent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveByInstanceId", instanceId)
	ret0, _ := ret[0].(records.Rent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveByInstanceId indicates an expected call of GetActiveByInstanceId.
func (mr *MockIRepositoryMockRecorder) GetActiveByInstanceId(instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveByInstanceId", reflect.TypeOf((*MockIRepository)(nil).GetActiveByInstanceId), instanceId)
}

// GetById mocks base method.
func (m *MockIRepository) GetById(rentId uuid.UUID) (records.Rent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", rentId)
	ret0, _ := ret[0].(records.Rent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRepositoryMockRecorder) GetById(rentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRepository)(nil).GetById), rentId)
}

// GetByUserId mocks base method.
func (m *MockIRepository) GetByUserId(userId uuid.UUID) (collection.Collection[records.Rent], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", userId)
	ret0, _ := ret[0].(collection.Collection[records.Rent])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockIRepositoryMockRecorder) GetByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockIRepository)(nil).GetByUserId), userId)
}

// GetPastByUserId mocks base method.
func (m *MockIRepository) GetPastByUserId(userId uuid.UUID) (collection.Collection[records.Rent], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPastByUserId", userId)
	ret0, _ := ret[0].(collection.Collection[records.Rent])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPastByUserId indicates an expected call of GetPastByUserId.
func (mr *MockIRepositoryMockRecorder) GetPastByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPastByUserId", reflect.TypeOf((*MockIRepository)(nil).GetPastByUserId), userId)
}

// Update mocks base method.
func (m *MockIRepository) Update(rent records.Rent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", rent)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryMockRecorder) Update(rent any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepository)(nil).Update), rent)
}

// MockIRequestRepository is a mock of IRequestRepository interface.
type MockIRequestRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRequestRepositoryMockRecorder
	isgomock struct{}
}

// MockIRequestRepositoryMockRecorder is the mock recorder for MockIRequestRepository.
type MockIRequestRepositoryMockRecorder struct {
	mock *MockIRequestRepository
}

// NewMockIRequestRepository creates a new mock instance.
func NewMockIRequestRepository(ctrl *gomock.Controller) *MockIRequestRepository {
	mock := &MockIRequestRepository{ctrl: ctrl}
	mock.recorder = &MockIRequestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRequestRepository) EXPECT() *MockIRequestRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRequestRepository) Create(request requests.Rent) (requests.Rent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request)
	ret0, _ := ret[0].(requests.Rent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRequestRepositoryMockRecorder) Create(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRequestRepository)(nil).Create), request)
}

// GetById mocks base method.
func (m *MockIRequestRepository) GetById(requestId uuid.UUID) (requests.Rent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", requestId)
	ret0, _ := ret[0].(requests.Rent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRequestRepositoryMockRecorder) GetById(requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRequestRepository)(nil).GetById), requestId)
}

// GetByInstanceId mocks base method.
func (m *MockIRequestRepository) GetByInstanceId(instanceId uuid.UUID) (requests.Rent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByInstanceId", instanceId)
	ret0, _ := ret[0].(requests.Rent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByInstanceId indicates an expected call of GetByInstanceId.
func (mr *MockIRequestRepositoryMockRecorder) GetByInstanceId(instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByInstanceId", reflect.TypeOf((*MockIRequestRepository)(nil).GetByInstanceId), instanceId)
}

// GetByPickUpPointId mocks base method.
func (m *MockIRequestRepository) GetByPickUpPointId(pickUpPointId uuid.UUID) (collection.Collection[requests.Rent], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPickUpPointId", pickUpPointId)
	ret0, _ := ret[0].(collection.Collection[requests.Rent])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPickUpPointId indicates an expected call of GetByPickUpPointId.
func (mr *MockIRequestRepositoryMockRecorder) GetByPickUpPointId(pickUpPointId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPickUpPointId", reflect.TypeOf((*MockIRequestRepository)(nil).GetByPickUpPointId), pickUpPointId)
}

// GetByUserId mocks base method.
func (m *MockIRequestRepository) GetByUserId(userId uuid.UUID) (collection.Collection[requests.Rent], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", userId)
	ret0, _ := ret[0].(collection.Collection[requests.Rent])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockIRequestRepositoryMockRecorder) GetByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockIRequestRepository)(nil).GetByUserId), userId)
}

// Remove mocks base method.
func (m *MockIRequestRepository) Remove(requestId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", requestId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockIRequestRepositoryMockRecorder) Remove(requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIRequestRepository)(nil).Remove), requestId)
}

// MockIReturnRepository is a mock of IReturnRepository interface.
type MockIReturnRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIReturnRepositoryMockRecorder
	isgomock struct{}
}

// MockIReturnRepositoryMockRecorder is the mock recorder for MockIReturnRepository.
type MockIReturnRepositoryMockRecorder struct {
	mock *MockIReturnRepository
}

// NewMockIReturnRepository creates a new mock instance.
func NewMockIReturnRepository(ctrl *gomock.Controller) *MockIReturnRepository {
	mock := &MockIReturnRepository{ctrl: ctrl}
	mock.recorder = &MockIReturnRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReturnRepository) EXPECT() *MockIReturnRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIReturnRepository) Create(request requests.Return) (requests.Return, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request)
	ret0, _ := ret[0].(requests.Return)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIReturnRepositoryMockRecorder) Create(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIReturnRepository)(nil).Create), request)
}

// GetById mocks base method.
func (m *MockIReturnRepository) GetById(requestId uuid.UUID) (requests.Return, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", requestId)
	ret0, _ := ret[0].(requests.Return)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIReturnRepositoryMockRecorder) GetById(requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIReturnRepository)(nil).GetById), requestId)
}

// GetByInstanceId mocks base method.
func (m *MockIReturnRepository) GetByInstanceId(instanceId uuid.UUID) (requests.Return, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByInstanceId", instanceId)
	ret0, _ := ret[0].(requests.Return)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByInstanceId indicates an expected call of GetByInstanceId.
func (mr *MockIReturnRepositoryMockRecorder) GetByInstanceId(instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByInstanceId", reflect.TypeOf((*MockIReturnRepository)(nil).GetByInstanceId), instanceId)
}

// GetByPickUpPointId mocks base method.
func (m *MockIReturnRepository) GetByPickUpPointId(pickUpPointId uuid.UUID) (collection.Collection[requests.Return], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByPickUpPointId", pickUpPointId)
	ret0, _ := ret[0].(collection.Collection[requests.Return])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByPickUpPointId indicates an expected call of GetByPickUpPointId.
func (mr *MockIReturnRepositoryMockRecorder) GetByPickUpPointId(pickUpPointId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByPickUpPointId", reflect.TypeOf((*MockIReturnRepository)(nil).GetByPickUpPointId), pickUpPointId)
}

// GetByUserId mocks base method.
func (m *MockIReturnRepository) GetByUserId(userId uuid.UUID) (collection.Collection[requests.Return], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByUserId", userId)
	ret0, _ := ret[0].(collection.Collection[requests.Return])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByUserId indicates an expected call of GetByUserId.
func (mr *MockIReturnRepositoryMockRecorder) GetByUserId(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByUserId", reflect.TypeOf((*MockIReturnRepository)(nil).GetByUserId), userId)
}

// Remove mocks base method.
func (m *MockIReturnRepository) Remove(requestId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", requestId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockIReturnRepositoryMockRecorder) Remove(requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIReturnRepository)(nil).Remove), requestId)
}
