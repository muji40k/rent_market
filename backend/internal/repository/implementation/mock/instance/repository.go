// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=../../implementation/mock/instance/repository.go
//

// Package mock_instance is a generated GoMock package.
package mock_instance

import (
	reflect "reflect"
	models "rent_service/internal/domain/models"
	collection "rent_service/internal/misc/types/collection"
	instance "rent_service/internal/repository/interfaces/instance"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIRepository is a mock of IRepository interface.
type MockIRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRepositoryMockRecorder
	isgomock struct{}
}

// MockIRepositoryMockRecorder is the mock recorder for MockIRepository.
type MockIRepositoryMockRecorder struct {
	mock *MockIRepository
}

// NewMockIRepository creates a new mock instance.
func NewMockIRepository(ctrl *gomock.Controller) *MockIRepository {
	mock := &MockIRepository{ctrl: ctrl}
	mock.recorder = &MockIRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepository) EXPECT() *MockIRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRepository) Create(instance models.Instance) (models.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", instance)
	ret0, _ := ret[0].(models.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRepositoryMockRecorder) Create(instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepository)(nil).Create), instance)
}

// GetById mocks base method.
func (m *MockIRepository) GetById(instanceId uuid.UUID) (models.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", instanceId)
	ret0, _ := ret[0].(models.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockIRepositoryMockRecorder) GetById(instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockIRepository)(nil).GetById), instanceId)
}

// GetWithFilter mocks base method.
func (m *MockIRepository) GetWithFilter(filter instance.Filter, sort instance.Sort) (collection.Collection[models.Instance], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithFilter", filter, sort)
	ret0, _ := ret[0].(collection.Collection[models.Instance])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithFilter indicates an expected call of GetWithFilter.
func (mr *MockIRepositoryMockRecorder) GetWithFilter(filter, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithFilter", reflect.TypeOf((*MockIRepository)(nil).GetWithFilter), filter, sort)
}

// Update mocks base method.
func (m *MockIRepository) Update(instance models.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIRepositoryMockRecorder) Update(instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRepository)(nil).Update), instance)
}

// MockIPayPlansRepository is a mock of IPayPlansRepository interface.
type MockIPayPlansRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPayPlansRepositoryMockRecorder
	isgomock struct{}
}

// MockIPayPlansRepositoryMockRecorder is the mock recorder for MockIPayPlansRepository.
type MockIPayPlansRepositoryMockRecorder struct {
	mock *MockIPayPlansRepository
}

// NewMockIPayPlansRepository creates a new mock instance.
func NewMockIPayPlansRepository(ctrl *gomock.Controller) *MockIPayPlansRepository {
	mock := &MockIPayPlansRepository{ctrl: ctrl}
	mock.recorder = &MockIPayPlansRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPayPlansRepository) EXPECT() *MockIPayPlansRepositoryMockRecorder {
	return m.recorder
}

// AddPayPlan mocks base method.
func (m *MockIPayPlansRepository) AddPayPlan(instanceId uuid.UUID, plan models.PayPlan) (models.InstancePayPlans, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPayPlan", instanceId, plan)
	ret0, _ := ret[0].(models.InstancePayPlans)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPayPlan indicates an expected call of AddPayPlan.
func (mr *MockIPayPlansRepositoryMockRecorder) AddPayPlan(instanceId, plan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPayPlan", reflect.TypeOf((*MockIPayPlansRepository)(nil).AddPayPlan), instanceId, plan)
}

// Create mocks base method.
func (m *MockIPayPlansRepository) Create(payPlans models.InstancePayPlans) (models.InstancePayPlans, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", payPlans)
	ret0, _ := ret[0].(models.InstancePayPlans)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIPayPlansRepositoryMockRecorder) Create(payPlans any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPayPlansRepository)(nil).Create), payPlans)
}

// GetByInstanceId mocks base method.
func (m *MockIPayPlansRepository) GetByInstanceId(instanceId uuid.UUID) (models.InstancePayPlans, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByInstanceId", instanceId)
	ret0, _ := ret[0].(models.InstancePayPlans)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByInstanceId indicates an expected call of GetByInstanceId.
func (mr *MockIPayPlansRepositoryMockRecorder) GetByInstanceId(instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByInstanceId", reflect.TypeOf((*MockIPayPlansRepository)(nil).GetByInstanceId), instanceId)
}

// Update mocks base method.
func (m *MockIPayPlansRepository) Update(arg0 models.InstancePayPlans) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIPayPlansRepositoryMockRecorder) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIPayPlansRepository)(nil).Update), arg0)
}

// MockIPhotoRepository is a mock of IPhotoRepository interface.
type MockIPhotoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIPhotoRepositoryMockRecorder
	isgomock struct{}
}

// MockIPhotoRepositoryMockRecorder is the mock recorder for MockIPhotoRepository.
type MockIPhotoRepositoryMockRecorder struct {
	mock *MockIPhotoRepository
}

// NewMockIPhotoRepository creates a new mock instance.
func NewMockIPhotoRepository(ctrl *gomock.Controller) *MockIPhotoRepository {
	mock := &MockIPhotoRepository{ctrl: ctrl}
	mock.recorder = &MockIPhotoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPhotoRepository) EXPECT() *MockIPhotoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPhotoRepository) Create(instanceId, photoId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", instanceId, photoId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIPhotoRepositoryMockRecorder) Create(instanceId, photoId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPhotoRepository)(nil).Create), instanceId, photoId)
}

// GetByInstanceId mocks base method.
func (m *MockIPhotoRepository) GetByInstanceId(instanceId uuid.UUID) (collection.Collection[uuid.UUID], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByInstanceId", instanceId)
	ret0, _ := ret[0].(collection.Collection[uuid.UUID])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByInstanceId indicates an expected call of GetByInstanceId.
func (mr *MockIPhotoRepositoryMockRecorder) GetByInstanceId(instanceId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByInstanceId", reflect.TypeOf((*MockIPhotoRepository)(nil).GetByInstanceId), instanceId)
}
