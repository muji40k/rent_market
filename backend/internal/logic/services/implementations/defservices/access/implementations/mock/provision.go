// Code generated by MockGen. DO NOT EDIT.
// Source: provision.go
//
// Generated by this command:
//
//	mockgen -source=provision.go -destination=implementations/mock/provision.go
//

// Package mock_access is a generated GoMock package.
package mock_access

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIProvision is a mock of IProvision interface.
type MockIProvision struct {
	ctrl     *gomock.Controller
	recorder *MockIProvisionMockRecorder
	isgomock struct{}
}

// MockIProvisionMockRecorder is the mock recorder for MockIProvision.
type MockIProvisionMockRecorder struct {
	mock *MockIProvision
}

// NewMockIProvision creates a new mock instance.
func NewMockIProvision(ctrl *gomock.Controller) *MockIProvision {
	mock := &MockIProvision{ctrl: ctrl}
	mock.recorder = &MockIProvisionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProvision) EXPECT() *MockIProvisionMockRecorder {
	return m.recorder
}

// Access mocks base method.
func (m *MockIProvision) Access(userId, provisionId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access", userId, provisionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Access indicates an expected call of Access.
func (mr *MockIProvisionMockRecorder) Access(userId, provisionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockIProvision)(nil).Access), userId, provisionId)
}

// MockIProvisionRequest is a mock of IProvisionRequest interface.
type MockIProvisionRequest struct {
	ctrl     *gomock.Controller
	recorder *MockIProvisionRequestMockRecorder
	isgomock struct{}
}

// MockIProvisionRequestMockRecorder is the mock recorder for MockIProvisionRequest.
type MockIProvisionRequestMockRecorder struct {
	mock *MockIProvisionRequest
}

// NewMockIProvisionRequest creates a new mock instance.
func NewMockIProvisionRequest(ctrl *gomock.Controller) *MockIProvisionRequest {
	mock := &MockIProvisionRequest{ctrl: ctrl}
	mock.recorder = &MockIProvisionRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProvisionRequest) EXPECT() *MockIProvisionRequestMockRecorder {
	return m.recorder
}

// Access mocks base method.
func (m *MockIProvisionRequest) Access(userId, requestId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access", userId, requestId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Access indicates an expected call of Access.
func (mr *MockIProvisionRequestMockRecorder) Access(userId, requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockIProvisionRequest)(nil).Access), userId, requestId)
}

// MockIProvisionRevoke is a mock of IProvisionRevoke interface.
type MockIProvisionRevoke struct {
	ctrl     *gomock.Controller
	recorder *MockIProvisionRevokeMockRecorder
	isgomock struct{}
}

// MockIProvisionRevokeMockRecorder is the mock recorder for MockIProvisionRevoke.
type MockIProvisionRevokeMockRecorder struct {
	mock *MockIProvisionRevoke
}

// NewMockIProvisionRevoke creates a new mock instance.
func NewMockIProvisionRevoke(ctrl *gomock.Controller) *MockIProvisionRevoke {
	mock := &MockIProvisionRevoke{ctrl: ctrl}
	mock.recorder = &MockIProvisionRevokeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProvisionRevoke) EXPECT() *MockIProvisionRevokeMockRecorder {
	return m.recorder
}

// Access mocks base method.
func (m *MockIProvisionRevoke) Access(userId, revokeId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access", userId, revokeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Access indicates an expected call of Access.
func (mr *MockIProvisionRevokeMockRecorder) Access(userId, revokeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockIProvisionRevoke)(nil).Access), userId, revokeId)
}
