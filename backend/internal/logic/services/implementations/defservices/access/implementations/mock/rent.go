// Code generated by MockGen. DO NOT EDIT.
// Source: rent.go
//
// Generated by this command:
//
//	mockgen -source=rent.go -destination=implementations/mock/rent.go
//

// Package mock_access is a generated GoMock package.
package mock_access

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIRent is a mock of IRent interface.
type MockIRent struct {
	ctrl     *gomock.Controller
	recorder *MockIRentMockRecorder
	isgomock struct{}
}

// MockIRentMockRecorder is the mock recorder for MockIRent.
type MockIRentMockRecorder struct {
	mock *MockIRent
}

// NewMockIRent creates a new mock instance.
func NewMockIRent(ctrl *gomock.Controller) *MockIRent {
	mock := &MockIRent{ctrl: ctrl}
	mock.recorder = &MockIRentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRent) EXPECT() *MockIRentMockRecorder {
	return m.recorder
}

// Access mocks base method.
func (m *MockIRent) Access(userId, rentId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access", userId, rentId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Access indicates an expected call of Access.
func (mr *MockIRentMockRecorder) Access(userId, rentId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockIRent)(nil).Access), userId, rentId)
}

// MockIRentRequest is a mock of IRentRequest interface.
type MockIRentRequest struct {
	ctrl     *gomock.Controller
	recorder *MockIRentRequestMockRecorder
	isgomock struct{}
}

// MockIRentRequestMockRecorder is the mock recorder for MockIRentRequest.
type MockIRentRequestMockRecorder struct {
	mock *MockIRentRequest
}

// NewMockIRentRequest creates a new mock instance.
func NewMockIRentRequest(ctrl *gomock.Controller) *MockIRentRequest {
	mock := &MockIRentRequest{ctrl: ctrl}
	mock.recorder = &MockIRentRequestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRentRequest) EXPECT() *MockIRentRequestMockRecorder {
	return m.recorder
}

// Access mocks base method.
func (m *MockIRentRequest) Access(userId, requestId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access", userId, requestId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Access indicates an expected call of Access.
func (mr *MockIRentRequestMockRecorder) Access(userId, requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockIRentRequest)(nil).Access), userId, requestId)
}

// MockIRentReturn is a mock of IRentReturn interface.
type MockIRentReturn struct {
	ctrl     *gomock.Controller
	recorder *MockIRentReturnMockRecorder
	isgomock struct{}
}

// MockIRentReturnMockRecorder is the mock recorder for MockIRentReturn.
type MockIRentReturnMockRecorder struct {
	mock *MockIRentReturn
}

// NewMockIRentReturn creates a new mock instance.
func NewMockIRentReturn(ctrl *gomock.Controller) *MockIRentReturn {
	mock := &MockIRentReturn{ctrl: ctrl}
	mock.recorder = &MockIRentReturnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRentReturn) EXPECT() *MockIRentReturnMockRecorder {
	return m.recorder
}

// Access mocks base method.
func (m *MockIRentReturn) Access(userId, requestId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Access", userId, requestId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Access indicates an expected call of Access.
func (mr *MockIRentReturnMockRecorder) Access(userId, requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Access", reflect.TypeOf((*MockIRentReturn)(nil).Access), userId, requestId)
}
