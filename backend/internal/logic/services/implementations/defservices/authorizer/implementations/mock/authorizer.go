// Code generated by MockGen. DO NOT EDIT.
// Source: authorizer.go
//
// Generated by this command:
//
//	mockgen -source=authorizer.go -destination=implementations/mock/authorizer.go
//

// Package mock_authorizer is a generated GoMock package.
package mock_authorizer

import (
	reflect "reflect"
	models "rent_service/internal/domain/models"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIAuthorizer is a mock of IAuthorizer interface.
type MockIAuthorizer struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthorizerMockRecorder
	isgomock struct{}
}

// MockIAuthorizerMockRecorder is the mock recorder for MockIAuthorizer.
type MockIAuthorizerMockRecorder struct {
	mock *MockIAuthorizer
}

// NewMockIAuthorizer creates a new mock instance.
func NewMockIAuthorizer(ctrl *gomock.Controller) *MockIAuthorizer {
	mock := &MockIAuthorizer{ctrl: ctrl}
	mock.recorder = &MockIAuthorizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthorizer) EXPECT() *MockIAuthorizerMockRecorder {
	return m.recorder
}

// IsAdministrator mocks base method.
func (m *MockIAuthorizer) IsAdministrator(userId uuid.UUID) (models.Administrator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdministrator", userId)
	ret0, _ := ret[0].(models.Administrator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAdministrator indicates an expected call of IsAdministrator.
func (mr *MockIAuthorizerMockRecorder) IsAdministrator(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdministrator", reflect.TypeOf((*MockIAuthorizer)(nil).IsAdministrator), userId)
}

// IsRenter mocks base method.
func (m *MockIAuthorizer) IsRenter(userId uuid.UUID) (models.Renter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRenter", userId)
	ret0, _ := ret[0].(models.Renter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRenter indicates an expected call of IsRenter.
func (mr *MockIAuthorizerMockRecorder) IsRenter(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRenter", reflect.TypeOf((*MockIAuthorizer)(nil).IsRenter), userId)
}

// IsStorekeeper mocks base method.
func (m *MockIAuthorizer) IsStorekeeper(userId uuid.UUID) (models.Storekeeper, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsStorekeeper", userId)
	ret0, _ := ret[0].(models.Storekeeper)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsStorekeeper indicates an expected call of IsStorekeeper.
func (mr *MockIAuthorizerMockRecorder) IsStorekeeper(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStorekeeper", reflect.TypeOf((*MockIAuthorizer)(nil).IsStorekeeper), userId)
}
