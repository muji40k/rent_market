// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go
//
// Generated by this command:
//
//	mockgen -source=registry.go -destination=implementations/mock/registry.go
//

// Package mock_photoregistry is a generated GoMock package.
package mock_photoregistry

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIRegistry is a mock of IRegistry interface.
type MockIRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockIRegistryMockRecorder
	isgomock struct{}
}

// MockIRegistryMockRecorder is the mock recorder for MockIRegistry.
type MockIRegistryMockRecorder struct {
	mock *MockIRegistry
}

// NewMockIRegistry creates a new mock instance.
func NewMockIRegistry(ctrl *gomock.Controller) *MockIRegistry {
	mock := &MockIRegistry{ctrl: ctrl}
	mock.recorder = &MockIRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRegistry) EXPECT() *MockIRegistryMockRecorder {
	return m.recorder
}

// ConvertPath mocks base method.
func (m *MockIRegistry) ConvertPath(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertPath", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// ConvertPath indicates an expected call of ConvertPath.
func (mr *MockIRegistryMockRecorder) ConvertPath(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertPath", reflect.TypeOf((*MockIRegistry)(nil).ConvertPath), path)
}

// MoveFromTemp mocks base method.
func (m *MockIRegistry) MoveFromTemp(tempId uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveFromTemp", tempId)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveFromTemp indicates an expected call of MoveFromTemp.
func (mr *MockIRegistryMockRecorder) MoveFromTemp(tempId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveFromTemp", reflect.TypeOf((*MockIRegistry)(nil).MoveFromTemp), tempId)
}

// SaveTempPhoto mocks base method.
func (m *MockIRegistry) SaveTempPhoto(tempId uuid.UUID, content []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTempPhoto", tempId, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTempPhoto indicates an expected call of SaveTempPhoto.
func (mr *MockIRegistryMockRecorder) SaveTempPhoto(tempId, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTempPhoto", reflect.TypeOf((*MockIRegistry)(nil).SaveTempPhoto), tempId, content)
}
