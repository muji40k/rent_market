// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go
//
// Generated by this command:
//
//	mockgen -source=registry.go -destination=storages/mock/storage.go
//

// Package mock_defregistry is a generated GoMock package.
package mock_defregistry

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIStorage is a mock of IStorage interface.
type MockIStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIStorageMockRecorder
	isgomock struct{}
}

// MockIStorageMockRecorder is the mock recorder for MockIStorage.
type MockIStorageMockRecorder struct {
	mock *MockIStorage
}

// NewMockIStorage creates a new mock instance.
func NewMockIStorage(ctrl *gomock.Controller) *MockIStorage {
	mock := &MockIStorage{ctrl: ctrl}
	mock.recorder = &MockIStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStorage) EXPECT() *MockIStorageMockRecorder {
	return m.recorder
}

// ConvertPath mocks base method.
func (m *MockIStorage) ConvertPath(path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertPath", path)
	ret0, _ := ret[0].(string)
	return ret0
}

// ConvertPath indicates an expected call of ConvertPath.
func (mr *MockIStorageMockRecorder) ConvertPath(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertPath", reflect.TypeOf((*MockIStorage)(nil).ConvertPath), path)
}

// SaveTempData mocks base method.
func (m *MockIStorage) SaveTempData(tempPath string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTempData", tempPath)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveTempData indicates an expected call of SaveTempData.
func (mr *MockIStorageMockRecorder) SaveTempData(tempPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTempData", reflect.TypeOf((*MockIStorage)(nil).SaveTempData), tempPath)
}

// WriteTempData mocks base method.
func (m *MockIStorage) WriteTempData(content []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteTempData", content)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteTempData indicates an expected call of WriteTempData.
func (mr *MockIStorageMockRecorder) WriteTempData(content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteTempData", reflect.TypeOf((*MockIStorage)(nil).WriteTempData), content)
}
