// Code generated by MockGen. DO NOT EDIT.
// Source: checker.go
//
// Generated by this command:
//
//	mockgen -source=checker.go -destination=mock/mock.go
//

// Package mock_paymentcheckers is a generated GoMock package.
package mock_paymentcheckers

import (
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIRegistrationChecker is a mock of IRegistrationChecker interface.
type MockIRegistrationChecker struct {
	ctrl     *gomock.Controller
	recorder *MockIRegistrationCheckerMockRecorder
	isgomock struct{}
}

// MockIRegistrationCheckerMockRecorder is the mock recorder for MockIRegistrationChecker.
type MockIRegistrationCheckerMockRecorder struct {
	mock *MockIRegistrationChecker
}

// NewMockIRegistrationChecker creates a new mock instance.
func NewMockIRegistrationChecker(ctrl *gomock.Controller) *MockIRegistrationChecker {
	mock := &MockIRegistrationChecker{ctrl: ctrl}
	mock.recorder = &MockIRegistrationCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRegistrationChecker) EXPECT() *MockIRegistrationCheckerMockRecorder {
	return m.recorder
}

// CheckPayerId mocks base method.
func (m *MockIRegistrationChecker) CheckPayerId(payerId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPayerId", payerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckPayerId indicates an expected call of CheckPayerId.
func (mr *MockIRegistrationCheckerMockRecorder) CheckPayerId(payerId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPayerId", reflect.TypeOf((*MockIRegistrationChecker)(nil).CheckPayerId), payerId)
}

// MethodId mocks base method.
func (m *MockIRegistrationChecker) MethodId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MethodId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// MethodId indicates an expected call of MethodId.
func (mr *MockIRegistrationCheckerMockRecorder) MethodId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MethodId", reflect.TypeOf((*MockIRegistrationChecker)(nil).MethodId))
}
