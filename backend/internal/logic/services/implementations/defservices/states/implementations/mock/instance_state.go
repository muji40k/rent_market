// Code generated by MockGen. DO NOT EDIT.
// Source: instance_state.go
//
// Generated by this command:
//
//	mockgen -source=instance_state.go -destination=implementations/mock/instance_state.go
//

// Package mock_states is a generated GoMock package.
package mock_states

import (
	reflect "reflect"
	records "rent_service/internal/domain/records"
	requests "rent_service/internal/domain/requests"
	provide "rent_service/internal/logic/services/interfaces/provide"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockIInstanceStateMachine is a mock of IInstanceStateMachine interface.
type MockIInstanceStateMachine struct {
	ctrl     *gomock.Controller
	recorder *MockIInstanceStateMachineMockRecorder
	isgomock struct{}
}

// MockIInstanceStateMachineMockRecorder is the mock recorder for MockIInstanceStateMachine.
type MockIInstanceStateMachineMockRecorder struct {
	mock *MockIInstanceStateMachine
}

// NewMockIInstanceStateMachine creates a new mock instance.
func NewMockIInstanceStateMachine(ctrl *gomock.Controller) *MockIInstanceStateMachine {
	mock := &MockIInstanceStateMachine{ctrl: ctrl}
	mock.recorder = &MockIInstanceStateMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIInstanceStateMachine) EXPECT() *MockIInstanceStateMachineMockRecorder {
	return m.recorder
}

// AcceptDelivery mocks base method.
func (m *MockIInstanceStateMachine) AcceptDelivery(instanceId, deliveryId uuid.UUID, comment *string, verificationCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptDelivery", instanceId, deliveryId, comment, verificationCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptDelivery indicates an expected call of AcceptDelivery.
func (mr *MockIInstanceStateMachineMockRecorder) AcceptDelivery(instanceId, deliveryId, comment, verificationCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptDelivery", reflect.TypeOf((*MockIInstanceStateMachine)(nil).AcceptDelivery), instanceId, deliveryId, comment, verificationCode)
}

// AcceptProvisionRequest mocks base method.
func (m *MockIInstanceStateMachine) AcceptProvisionRequest(requestId uuid.UUID, form provide.StartForm) (records.Provision, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptProvisionRequest", requestId, form)
	ret0, _ := ret[0].(records.Provision)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptProvisionRequest indicates an expected call of AcceptProvisionRequest.
func (mr *MockIInstanceStateMachineMockRecorder) AcceptProvisionRequest(requestId, form any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptProvisionRequest", reflect.TypeOf((*MockIInstanceStateMachine)(nil).AcceptProvisionRequest), requestId, form)
}

// AcceptProvisionReturn mocks base method.
func (m *MockIInstanceStateMachine) AcceptProvisionReturn(instanceId, revokeId uuid.UUID, verificationCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptProvisionReturn", instanceId, revokeId, verificationCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptProvisionReturn indicates an expected call of AcceptProvisionReturn.
func (mr *MockIInstanceStateMachineMockRecorder) AcceptProvisionReturn(instanceId, revokeId, verificationCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptProvisionReturn", reflect.TypeOf((*MockIInstanceStateMachine)(nil).AcceptProvisionReturn), instanceId, revokeId, verificationCode)
}

// AcceptRentRequest mocks base method.
func (m *MockIInstanceStateMachine) AcceptRentRequest(instanceId, requestId uuid.UUID, verificationCode string) (records.Rent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptRentRequest", instanceId, requestId, verificationCode)
	ret0, _ := ret[0].(records.Rent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptRentRequest indicates an expected call of AcceptRentRequest.
func (mr *MockIInstanceStateMachineMockRecorder) AcceptRentRequest(instanceId, requestId, verificationCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptRentRequest", reflect.TypeOf((*MockIInstanceStateMachine)(nil).AcceptRentRequest), instanceId, requestId, verificationCode)
}

// AcceptRentReturn mocks base method.
func (m *MockIInstanceStateMachine) AcceptRentReturn(instanceId, returnId uuid.UUID, comment *string, verificationCode string) (records.Storage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptRentReturn", instanceId, returnId, comment, verificationCode)
	ret0, _ := ret[0].(records.Storage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptRentReturn indicates an expected call of AcceptRentReturn.
func (mr *MockIInstanceStateMachineMockRecorder) AcceptRentReturn(instanceId, returnId, comment, verificationCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptRentReturn", reflect.TypeOf((*MockIInstanceStateMachine)(nil).AcceptRentReturn), instanceId, returnId, comment, verificationCode)
}

// CancelProvisionReturn mocks base method.
func (m *MockIInstanceStateMachine) CancelProvisionReturn(instanceId, revokeId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelProvisionReturn", instanceId, revokeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelProvisionReturn indicates an expected call of CancelProvisionReturn.
func (mr *MockIInstanceStateMachineMockRecorder) CancelProvisionReturn(instanceId, revokeId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelProvisionReturn", reflect.TypeOf((*MockIInstanceStateMachine)(nil).CancelProvisionReturn), instanceId, revokeId)
}

// CancelRentReturn mocks base method.
func (m *MockIInstanceStateMachine) CancelRentReturn(instanceId, returnId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelRentReturn", instanceId, returnId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelRentReturn indicates an expected call of CancelRentReturn.
func (mr *MockIInstanceStateMachineMockRecorder) CancelRentReturn(instanceId, returnId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelRentReturn", reflect.TypeOf((*MockIInstanceStateMachine)(nil).CancelRentReturn), instanceId, returnId)
}

// CreateDelivery mocks base method.
func (m *MockIInstanceStateMachine) CreateDelivery(instanceId, fromId, toId uuid.UUID) (requests.Delivery, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDelivery", instanceId, fromId, toId)
	ret0, _ := ret[0].(requests.Delivery)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDelivery indicates an expected call of CreateDelivery.
func (mr *MockIInstanceStateMachineMockRecorder) CreateDelivery(instanceId, fromId, toId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDelivery", reflect.TypeOf((*MockIInstanceStateMachine)(nil).CreateDelivery), instanceId, fromId, toId)
}

// CreateProvisionRequest mocks base method.
func (m *MockIInstanceStateMachine) CreateProvisionRequest(renterId uuid.UUID, form provide.RequestCreateForm) (requests.Provide, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvisionRequest", renterId, form)
	ret0, _ := ret[0].(requests.Provide)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvisionRequest indicates an expected call of CreateProvisionRequest.
func (mr *MockIInstanceStateMachineMockRecorder) CreateProvisionRequest(renterId, form any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvisionRequest", reflect.TypeOf((*MockIInstanceStateMachine)(nil).CreateProvisionRequest), renterId, form)
}

// CreateProvisionReturn mocks base method.
func (m *MockIInstanceStateMachine) CreateProvisionReturn(instanceId, provisionId, pickUpPointId uuid.UUID) (requests.Revoke, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProvisionReturn", instanceId, provisionId, pickUpPointId)
	ret0, _ := ret[0].(requests.Revoke)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProvisionReturn indicates an expected call of CreateProvisionReturn.
func (mr *MockIInstanceStateMachineMockRecorder) CreateProvisionReturn(instanceId, provisionId, pickUpPointId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProvisionReturn", reflect.TypeOf((*MockIInstanceStateMachine)(nil).CreateProvisionReturn), instanceId, provisionId, pickUpPointId)
}

// CreateRentRequest mocks base method.
func (m *MockIInstanceStateMachine) CreateRentRequest(instanceId, userId, pickUpPointId, paymentPeriodId uuid.UUID) (requests.Rent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRentRequest", instanceId, userId, pickUpPointId, paymentPeriodId)
	ret0, _ := ret[0].(requests.Rent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRentRequest indicates an expected call of CreateRentRequest.
func (mr *MockIInstanceStateMachineMockRecorder) CreateRentRequest(instanceId, userId, pickUpPointId, paymentPeriodId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRentRequest", reflect.TypeOf((*MockIInstanceStateMachine)(nil).CreateRentRequest), instanceId, userId, pickUpPointId, paymentPeriodId)
}

// CreateRentReturn mocks base method.
func (m *MockIInstanceStateMachine) CreateRentReturn(instanceId, rentId, pickUpPointId uuid.UUID, endDate time.Time) (requests.Return, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRentReturn", instanceId, rentId, pickUpPointId, endDate)
	ret0, _ := ret[0].(requests.Return)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRentReturn indicates an expected call of CreateRentReturn.
func (mr *MockIInstanceStateMachineMockRecorder) CreateRentReturn(instanceId, rentId, pickUpPointId, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRentReturn", reflect.TypeOf((*MockIInstanceStateMachine)(nil).CreateRentReturn), instanceId, rentId, pickUpPointId, endDate)
}

// RejectProvisionRequest mocks base method.
func (m *MockIInstanceStateMachine) RejectProvisionRequest(requestId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectProvisionRequest", requestId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectProvisionRequest indicates an expected call of RejectProvisionRequest.
func (mr *MockIInstanceStateMachineMockRecorder) RejectProvisionRequest(requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectProvisionRequest", reflect.TypeOf((*MockIInstanceStateMachine)(nil).RejectProvisionRequest), requestId)
}

// RejectRentRequest mocks base method.
func (m *MockIInstanceStateMachine) RejectRentRequest(instanceId, requestId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RejectRentRequest", instanceId, requestId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RejectRentRequest indicates an expected call of RejectRentRequest.
func (mr *MockIInstanceStateMachineMockRecorder) RejectRentRequest(instanceId, requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RejectRentRequest", reflect.TypeOf((*MockIInstanceStateMachine)(nil).RejectRentRequest), instanceId, requestId)
}

// SendDelivery mocks base method.
func (m *MockIInstanceStateMachine) SendDelivery(instanceId, deliveryId uuid.UUID, verificationCode string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendDelivery", instanceId, deliveryId, verificationCode)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendDelivery indicates an expected call of SendDelivery.
func (mr *MockIInstanceStateMachineMockRecorder) SendDelivery(instanceId, deliveryId, verificationCode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendDelivery", reflect.TypeOf((*MockIInstanceStateMachine)(nil).SendDelivery), instanceId, deliveryId, verificationCode)
}
