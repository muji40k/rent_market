
services:
  nginx:
    build:
      context: ..
      dockerfile: ./nginx/balance.Dockerfile
    restart: always
    depends_on:
      backend:
        condition: service_started
      backend_ro1:
        condition: service_started
      backend_ro2:
        condition: service_started
      pgadmin:
        condition: service_started
      mirror_nginx:
        condition: service_started
    ports:
      - "80:80"
    volumes:
      - ${SERVER_PHOTO_PATH}:/static/img
      - /etc/localtime:/etc/localtime:ro

  backend:
    build:
      context: ../backend/
      dockerfile: ./Dockerfile
    restart: always
    depends_on:
      postgresql_db:
        condition: service_healthy
        restart: true
    ports:
      - "127.0.0.1:12345:80"
    environment:
      APP_PHOTO_BASE_URL: ${PHOTO_BASE_URL}
      APP_PHOTO_PATH_MAIN: /server/media
      APP_PHOTO_PATH_TEMP: /server/temp
      APP_SWAGGER_CONF_URL: ${SWAGGER_CONF}
      DB_AUTH_NAME: ${DB_AUTH_NAME}
      DB_MAIN_NAME: ${DB_MAIN_NAME}
      DB_HOST: postgresql_db
      DB_PORT: 5432
      DB_USER_NAME: ${DB_USER}
      DB_USER_PASSWORD: ${DB_PASSWORD}
      GIN_MODE: release
      LOGGER_TYPE: ${LOGGER_TYPE}
    volumes:
      - ${SERVER_PHOTO_PATH}:/server/media
      - ${SERVER_TEMP_PHOTO_PATH}:/server/temp
      - /etc/localtime:/etc/localtime:ro

######## RO Instances #########################################################
  backend_ro1:
    build:
      context: ../backend/
      dockerfile: ./Dockerfile
    restart: always
    depends_on:
      postgresql_db:
        condition: service_healthy
        restart: true
    ports:
      - "127.0.0.1:12346:80"
    environment:
      APP_PHOTO_BASE_URL: ${PHOTO_BASE_URL}
      APP_SWAGGER_CONF_URL: ${SWAGGER_CONF}
      DB_AUTH_NAME: ${DB_AUTH_NAME}
      DB_MAIN_NAME: ${DB_MAIN_NAME}
      DB_HOST: postgresql_db
      DB_PORT: 5432
      DB_USER_NAME: ${DB_RO_USER}
      DB_USER_PASSWORD: ${DB_RO_PASSWORD}
      GIN_MODE: release
      LOGGER_TYPE: ${LOGGER_TYPE}
    volumes:
      - /etc/localtime:/etc/localtime:ro

  backend_ro2:
    build:
      context: ../backend/
      dockerfile: ./Dockerfile
    restart: always
    depends_on:
      postgresql_db:
        condition: service_healthy
        restart: true
    ports:
      - "127.0.0.1:12347:80"
    environment:
      APP_PHOTO_BASE_URL: ${PHOTO_BASE_URL}
      APP_SWAGGER_CONF_URL: ${SWAGGER_CONF}
      DB_AUTH_NAME: ${DB_AUTH_NAME}
      DB_MAIN_NAME: ${DB_MAIN_NAME}
      DB_HOST: postgresql_db
      DB_PORT: 5432
      DB_USER_NAME: ${DB_RO_USER}
      DB_USER_PASSWORD: ${DB_RO_PASSWORD}
      GIN_MODE: release
      LOGGER_TYPE: ${LOGGER_TYPE}
    volumes:
      - /etc/localtime:/etc/localtime:ro

### TESTS #####################################################################
  backend_unit_tests:
    build:
      context: ../backend/
      dockerfile: ./test.Dockerfile
    depends_on:
      test_db:
        condition: service_healthy
        restart: true
    environment:
      TASK: unit_tests
      TEST_DB_HOST: test_db
      TEST_DB_PORT: 5432
      TEST_DB_NAME: ${DB_MAIN_NAME}
      TEST_DB_USERNAME: ${DB_USER}
      TEST_DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ../backend/allure-report/allure-results/:/go/allure-report/allure-results/

  backend_integration_tests:
    build:
      context: ../backend/
      dockerfile: ./test.Dockerfile
    depends_on:
      test_db:
        condition: service_healthy
        restart: true
    environment:
      TASK: integration_tests
      TEST_DB_HOST: test_db
      TEST_DB_PORT: 5432
      TEST_DB_NAME: ${DB_MAIN_NAME}
      TEST_DB_USERNAME: ${DB_USER}
      TEST_DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ../backend/allure-report/allure-results/:/go/allure-report/allure-results/

  backend_e2e_tests:
    build:
      context: ../backend/
      dockerfile: ./test.Dockerfile
    depends_on:
      test_db:
        condition: service_healthy
        restart: true
    environment:
      TASK: e2e_tests
      TEST_DB_HOST: test_db
      TEST_DB_PORT: 5432
      TEST_DB_NAME: ${DB_MAIN_NAME}
      TEST_DB_AUTH_NAME: ${DB_AUTH_NAME}
      TEST_DB_USERNAME: ${DB_USER}
      TEST_DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ../backend/allure-report/allure-results/:/go/allure-report/allure-results/

  backend_bdd_e2e_tests:
    build:
      context: ../backend/
      dockerfile: ./test.Dockerfile
    depends_on:
      test_db:
        condition: service_healthy
        restart: true
    environment:
      TASK: bdd_e2e_tests
      TEST_DB_HOST: test_db
      TEST_DB_PORT: 5432
      TEST_DB_NAME: ${DB_MAIN_NAME}
      TEST_DB_AUTH_NAME: ${DB_AUTH_NAME}
      TEST_DB_USERNAME: ${DB_USER}
      TEST_DB_PASSWORD: ${DB_PASSWORD}
      TEST_2FA_HOST: ${EMAIL_2FA_HOST}
      TEST_2FA_PORT: ${EMAIL_2FA_PORT}
      TEST_2FA_SENDER: ${EMAIL_2FA_SENDER}
      TEST_2FA_SENDER_PASSWORD: ${EMAIL_2FA_SENDER_PASSWORD}
      TEST_2FA_SENDER_EMAIL: ${EMAIL_2FA_SENDER_EMAIL}
      TEST_IMAP_PORT: ${TEST_IMAP_PORT}
      TEST_RECEPIENT_EMAIL: ${TEST_RECEPIENT_EMAIL}
      TEST_RECEPIENT_USERNAME: ${TEST_RECEPIENT_USERNAME}
      TEST_RECEPIENT_PASSWORD: ${TEST_RECEPIENT_PASSWORD}
    volumes:
      - /etc/localtime:/etc/localtime:ro

  backend_sandbox:
    build:
      context: ../backend/
      dockerfile: ./Dockerfile
    depends_on:
      debug_db:
        condition: service_healthy
        restart: true
    ports:
      - "127.0.0.1:54321:80"
    environment:
      APP_PHOTO_BASE_URL: ${PHOTO_BASE_URL}
      APP_PHOTO_PATH_MAIN: /server/media
      APP_PHOTO_PATH_TEMP: /server/temp
      APP_SWAGGER_CONF_URL: ${SWAGGER_CONF}
      DB_AUTH_NAME: ${DB_AUTH_NAME}
      DB_MAIN_NAME: ${DB_MAIN_NAME}
      DB_HOST: debug_db
      DB_PORT: 5432
      DB_USER_NAME: ${DB_USER}
      DB_USER_PASSWORD: ${DB_PASSWORD}
      GIN_MODE: release
      LOGGER_TYPE: ${LOGGER_TYPE}
    volumes:
      - /etc/localtime:/etc/localtime:ro
###############################################################################

  postgresql_db:
    build:
      context: ../scripts/psql/.
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGPORT: 5432
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256
    volumes:
      - /mnt/rent_market:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "127.0.0.1:5432:5432"
    command: |
      postgres
        -c wal_level=replica
        -c hot_standby=on
        -c hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test: 'pg_isready -U postgres --dbname=rent_market && pg_isready -U postgres --dbname authentication'
      interval: 10s
      timeout: 5s
      retries: 5

  test_db:
    build:
      context: ../scripts/psql/.
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGPORT: 5432
    volumes:
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: 'pg_isready -U postgres --dbname=rent_market && pg_isready -U postgres --dbname authentication'
      interval: 10s
      timeout: 5s
      retries: 5

  debug_db:
    build:
      context: ../scripts/psql/.
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGPORT: 5432
    ports:
      - "127.0.0.1:5434:5432"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    healthcheck:
      test: 'pg_isready -U postgres --dbname=rent_market && pg_isready -U postgres --dbname authentication'
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    depends_on:
      postgresql_db:
        condition: service_healthy
        restart: true
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - ./pgadmin/:/var/lib/pgadmin
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "127.0.0.1:42069:80"

######## Mirror ###############################################################
  mirror_nginx:
    build:
      context: ..
      dockerfile: ./nginx/mirror.Dockerfile
    restart: always
    depends_on:
      mirror_backend:
        condition: service_started
    ports:
      - "8080:80"
    volumes:
      - ${SERVER_PHOTO_PATH}:/static/img
      - /etc/localtime:/etc/localtime:ro

  mirror_backend:
    build:
      context: ../backend/
      dockerfile: ./Dockerfile
    restart: always
    depends_on:
      mirror_postgresql_db:
        condition: service_healthy
        restart: true
    ports:
      - "127.0.0.1:12344:80"
    environment:
      APP_PHOTO_BASE_URL: ${PHOTO_BASE_URL}
      APP_PHOTO_PATH_MAIN: /server/media
      APP_PHOTO_PATH_TEMP: /server/temp
      APP_SWAGGER_CONF_URL: ${SWAGGER_CONF}
      DB_AUTH_NAME: ${DB_AUTH_NAME}
      DB_MAIN_NAME: ${DB_MAIN_NAME}
      DB_HOST: mirror_postgresql_db
      DB_PORT: 5432
      DB_USER_NAME: ${DB_USER}
      DB_USER_PASSWORD: ${DB_PASSWORD}
      GIN_MODE: release
      LOGGER_TYPE: ${LOGGER_TYPE}
    volumes:
      - ${SERVER_PHOTO_PATH}:/server/media
      - ${SERVER_TEMP_PHOTO_PATH}:/server/temp
      - /etc/localtime:/etc/localtime:ro

  mirror_postgresql_db:
    build:
      context: ../scripts/psql/.
      dockerfile: ./replica.Dockerfile
    restart: always
    depends_on:
      postgresql_db:
        condition: service_healthy
        restart: true
    environment:
      PGUSER: ${DB_REPLICA_USER}
      PGPASSWORD: ${DB_REPLICA_PASSWORD}
      PGPORT: 5432
    volumes:
      - /mnt/rent_market_mirror:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "127.0.0.1:5433:5432"
    healthcheck:
      test: 'pg_isready -U postgres --dbname=rent_market && pg_isready -U postgres --dbname authentication'
      interval: 10s
      timeout: 5s
      retries: 5
###############################################################################

